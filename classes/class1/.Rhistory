plot_ex1 <- ggplot(df_ex1, aes(x = x_values, y = y_values_right)) +
geom_point() +  # Add points
labs(
x = "x",
y = "y",
title = "Beautiful plot :D",
) +
theme_minimal() +  # Use a minimal theme
geom_smooth(method = "lm", se = FALSE, color = "blue")  # Add a linear regression line
ggplot(hibbs, aes(x = growth, y = vote)) +
geom_point() +  # Add points
labs(
x = "Average recent growth in personal income",
y = "Incumbent party's vote share",
title = "Relationship between Income Growth and Vote Share",
subtitle = "Data from Hibbs Dataset"
) +
theme_minimal() +  # Use a minimal theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
plot.subtitle = element_text(hjust = 0.5)  # Center the subtitle
) +
geom_smooth(method = "lm", se = FALSE, color = "blue")  # Add a linear regression line
plot_ex1
#FIX THIS
#Define the different components
intercept <- 30
slope <- 10
error <- 3.9
#Generate X values suing seq
x_values <- seq(0, #from
4, #to
length.out = 200)
#Make y values
y_values <- intercept+slope*x_values
#Add standard deviation
y_values_right <- rnorm(y_values, 0, error)
#Make data frame great again
df_ex1 <- data_frame(x_values, y_values_right)
#plot time
plot_ex1 <- ggplot(df_ex1, aes(x = x_values, y = y_values_right)) +
geom_point() +  # Add points
labs(
x = "x",
y = "y",
title = "Beautiful plot :D",
) +
theme_minimal() +  # Use a minimal theme
geom_smooth(method = "lm", se = FALSE, color = "blue")  # Add a linear regression line
plot_ex1
#FIX THIS
#Define the different components
intercept <- 30
slope <- 10
error <- 3.9
#Generate X values suing seq
x_values <- seq(0, #from
4, #to
length.out = 200)
#Make y values
y_values <- intercept+slope*x_values
#Add standard deviation
y_values_right <- y_values + rnorm(length(x_values), 0, error)
#Make data frame great again
df_ex1 <- data_frame(x_values, y_values_right)
#plot time
plot_ex1 <- ggplot(df_ex1, aes(x = x_values, y = y_values_right)) +
geom_point() +  # Add points
labs(
x = "x",
y = "y",
title = "Beautiful plot :D",
) +
theme_minimal() +  # Use a minimal theme
geom_smooth(method = "lm", se = FALSE, color = "blue")  # Add a linear regression line
plot_ex1
#FIX THIS
#Similar as above, but I make another standard deviation
sd_b <- 10
y_values_b <- y_values + rnorm(length(x_values), 0, error)
df_ex1_b <- data_frame(x_values, y_values_b)
#plot time
plot_ex1 <- ggplot(df_ex1_b, aes(x = x_values, y = y_values_b)) +
geom_point() +  # Add points
labs(
x = "x",
y = "y",
title = "Beautiful plot :D",
) +
theme_minimal() +  # Use a minimal theme
geom_smooth(method = "lm", se = FALSE, color = "blue")  # Add a linear regression line
plot_ex1
#Similar as above, but I make another standard deviation
sd_b <- 10
y_values_b <- y_values + rnorm(length(x_values), 0, sd_b)
df_ex1_b <- data_frame(x_values, y_values_b)
#plot time
plot_ex1 <- ggplot(df_ex1_b, aes(x = x_values, y = y_values_b)) +
geom_point() +  # Add points
labs(
x = "x",
y = "y",
title = "Beautiful plot :D",
) +
theme_minimal() +  # Use a minimal theme
geom_smooth(method = "lm", se = FALSE, color = "blue")  # Add a linear regression line
plot_ex1
#Loading in data
names_girls <- read.table("data/Names/data/allnames_clean.csv", header = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "C:/Users/evax3/OneDrive - Aarhus universitet/AU/Methods 2/resources/classes")
# Make sure this guy is installed/updated (if you've alreadygot rstanarm installed, you just need to load it in using either library() or p_load() as below)
#install.packages("rstanarm")
#library(rstanarm)
# Load the rest
library(pacman)
pacman::p_load(tidyverse,
ggpubr,
ggplot2,
stringr,
rstanarm) # this time I'm just giving you the code
# Load data
hibbs <- read.table("data/ElectionsEconomy/data/hibbs.dat", header = TRUE)
# Make scatterplot
plot(hibbs$growth, hibbs$vote, xlab="Average recent growth in personal income",
ylab="Incumbent party's vote share")
# Estimate regression y = a + bx + error
M1 <- stan_glm(vote ~ growth, data=hibbs)
# Add a fitted line to the graph
abline(coef(M1), col="gray") # needs to be run with the plot() code above - running the whole chunk is the easiest way
# Display the fitted model
print(M1)
# Basic plot with ggplot2
ggplot(hibbs, aes(x = growth, y = vote)) +
geom_point() +  # Add points
labs(
x = "Average recent growth in personal income",
y = "Incumbent party's vote share",
title = "Relationship between Income Growth and Vote Share",
subtitle = "Data from Hibbs Dataset"
) +
theme_minimal() +  # Use a minimal theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
plot.subtitle = element_text(hjust = 0.5)  # Center the subtitle
) +
geom_smooth(method = "lm", se = FALSE, color = "blue")  # Add a linear regression line
set.seed(1998) # setting a seed (in the best year ever??) - this way, even though it's random, you'll get reproducible results next time you run this with this seed
# rnorm() works like: my_simulated_data <- rnorm(n, mean, sd) - now you go!
# your code here
my_simulated_data <- rnorm(20, 1.5, 10)
my_simulated_data
#Make a data frame
my_data_df <- data_frame(my_simulated_data)
#plot
plot_sim <- ggplot(my_data_df, aes(x = my_simulated_data)) + geom_histogram(fill="blue", color = "green") + theme_minimal() + labs(x = "My simulated data", y = "Count", title = "Histogram of my simulated data")
plot_sim
summary(my_data_df)
sd(my_simulated_data)
#Define the different components
intercept <- 30
slope <- 10
error <- 3.9
#Generate X values suing seq
x_values <- seq(0, #from
4, #to
length.out = 200)
#Make y values
y_values <- intercept+slope*x_values
#Add standard deviation
y_values_right <- y_values + rnorm(length(x_values), 0, error)
#Make data frame great again
df_ex1 <- data_frame(x_values, y_values_right)
#plot time
plot_ex1 <- ggplot(df_ex1, aes(x = x_values, y = y_values_right)) +
geom_point() +  # Add points
labs(
x = "x",
y = "y",
title = "Beautiful plot :D",
) +
theme_minimal() +  # Use a minimal theme
geom_smooth(method = "lm", se = FALSE, color = "blue")  # Add a linear regression line
plot_ex1
#FIX THIS
#Similar as above, but I make another standard deviation
sd_b <- 10
y_values_b <- y_values + rnorm(length(x_values), 0, sd_b)
df_ex1_b <- data_frame(x_values, y_values_b)
#plot time
plot_ex1 <- ggplot(df_ex1_b, aes(x = x_values, y = y_values_b)) +
geom_point() +  # Add points
labs(
x = "x",
y = "y",
title = "Beautiful plot :D",
) +
theme_minimal() +  # Use a minimal theme
geom_smooth(method = "lm", se = FALSE, color = "blue")  # Add a linear regression line
plot_ex1
#Loading in data
names_girls <- read.table("C:/Users/evax3/OneDrive - Aarhus universitet/AU/Methods 2/resources/classes/data/Names/data/allnames_clean.csv", header = TRUE)
get(wd)
getwd()
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "C:/Users/evax3/OneDrive - Aarhus universitet/AU/Methods 2/resources/classes")
getwd()
#Loading in data
setwd("C:/Users/evax3/OneDrive - Aarhus universitet/AU/Methods 2/resources/classes/data/Names/data")
names_girls <- read.table("allnames_clean.csv", header = TRUE)
getwd()
# Set the working directory
setwd("C:/Users/evax3/OneDrive - Aarhus universitet/AU/Methods 2/resources/classes/data/Names/data")
# Read the CSV file into a data frame
names_girls <- read.table("allnames_clean.csv", header = TRUE)
# Set the working directory
setwd("C:/Users/evax3/OneDrive - Aarhus universitet/AU/Methods 2/resources/classes/data/Names/data")
# Read the CSV file into a data frame
names_girls <- read.table("allnames_clean.csv")
# Set the working directory
setwd("C:/Users/evax3/OneDrive - Aarhus universitet/AU/Methods 2/resources/classes/data/Names/data")
# Read the CSV file into a data frame
names_girls <- read.table("allnames_clean.csv", header = TRUE, sep = ",")
View(names_girls)
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "C:/Users/evax3/OneDrive - Aarhus universitet/AU/Methods 2/resources/classes")
rnorm(20,1,5)
rnorm(20,1,5)
s <- 1
mu <- 0
tau <- 1
f1 <- function (x) {1/(s*sqrt(2*pi)*exp(-1/2*((x-mu)/s)^2)}
rnorm(20,1,5)
sig <- 1
mu <- 0
tau <- 1
f1 <- function (x) { return (1/(sig*sqrt(2*pi)*exp(-1/2*((x-mu)/s)^2))}
rnorm(20,1,5)
sig <- 1
mu <- 0
tau <- 1
f1 <- function (x) { return (1/(sig*sqrt(2*pi)*exp(-1/2*((x-mu)/sig)^2))}
rnorm(20,1,5)
sig <- 1
mu <- 0
tau <- 1
f1 <- function(x) {
return (1 / (sig * sqrt(2 * pi) * exp(-1/2 * ((x - mu) / sig)^2)))
}
results_1 <- f1(1)
print(results_1)
rnorm(20,1,5)
sig <- 1
mu <- 0
tau <- 1
f1 <- function(x) {
return (1 / (sig * sqrt(2 * pi) * exp(-1/2 * ((x - mu) / sig)^2)))
}
results_1 <- f1(1)
print(results_1)
# Generate a sequence of x values from -5 to 5
x_values <- seq(-5, 5, length.out = 100)
# Evaluate the function for each x value
y_values <- sapply(x_values, f1)
# Plot the function
plot(x_values, y_values, type = "l", col = "blue", lwd = 2,
xlab = "x", ylab = "f(x)", main = "Plot of the function f(x)")
# Add grid for better visualization
grid()
rnorm(20,1,5)
sigma <- 1
mu <- 0
tau <- 1
f1 <- function(x) {((1 / (sigma * sqrt(2 * pi)) * exp(-1 * ((x - mu)^2 / (2*sigma)^2))
}
rnorm(20,1,5)
sigma <- 1
mu <- 0
tau <- 1
f1 <- function(x) {(((1 / (sigma * sqrt(2 * pi)) * exp(-1 * ((x - mu)^2 / (2*sigma)^2))
}
library(ggplot2)
# define the values that we know from his description ðŸ™‚
mu <- 0.0
sigma <- 1.0
# defining your functions (this is a bit annoying if you do it manually)
f1 <- function(x) {
(1 / (sigma * sqrt(2 * pi))) * exp(-1 * ((x - mu)^2) / (2 * sigma^2))
}
f2 <- function(x) {
(1 / sqrt(2 * pi)) * exp(-1 * ((x - mu)^2) / 2)
}
# calculate the x values
x_values <- seq(-5, 5, by = 0.01)
# calculate the y values by calling our function
y_values_f1 <- f1(x_values)
y_values_f2 <- f2(x_values)
# plot the first graph
plot1 <- ggplot() +
geom_line(aes(x = x_values, y = y_values_f1), color = "blue") +
labs(y = "Density", x = "x", title = "Normal Distributions Function 1") +
theme_minimal()
# plot the second graph
plot2 <- ggplot() +
geom_line(aes(x = x_values, y = y_values_f2), color = "red") +
labs(y = "Density", x = "x", title = "Normal Distributions Function 2") +
theme_minimal()
# showing our plots
plot1
plot2
library(ggplot2)
# define the values that we know from his description ðŸ™‚
mu <- 0.0
sigma <- 10.0
# defining your functions (this is a bit annoying if you do it manually)
f1 <- function(x) {
(1 / (sigma * sqrt(2 * pi))) * exp(-1 * ((x - mu)^2) / (2 * sigma^2))
}
f2 <- function(x) {
(1 / sqrt(2 * pi)) * exp(-1 * ((x - mu)^2) / 2)
}
# calculate the x values
x_values <- seq(-5, 5, by = 0.01)
# calculate the y values by calling our function
y_values_f1 <- f1(x_values)
y_values_f2 <- f2(x_values)
# plot the first graph
plot1 <- ggplot() +
geom_line(aes(x = x_values, y = y_values_f1), color = "blue") +
labs(y = "Density", x = "x", title = "Normal Distributions Function 1") +
theme_minimal()
# plot the second graph
plot2 <- ggplot() +
geom_line(aes(x = x_values, y = y_values_f2), color = "red") +
labs(y = "Density", x = "x", title = "Normal Distributions Function 2") +
theme_minimal()
# showing our plots
plot1
plot2
library(ggplot2)
# define the values that we know from his description ðŸ™‚
mu <- 0.0
sigma <- 10.0
tau <- 1.0
# defining your functions (this is a bit annoying if you do it manually)
f1 <- function(x) {
(1 / (sigma * sqrt(2 * pi))) * exp(-1 * ((x - mu)^2) / (2 * sigma^2))
}
f2 <- function(x) {
(sqrt(tau/(2 * pi))) * exp(-tau * ((x - mu)^2) / 2)
}
# calculate the x values
x_values <- seq(-5, 5, by = 0.01)
# calculate the y values by calling our function
y_values_f1 <- f1(x_values)
y_values_f2 <- f2(x_values)
# plot the first graph
plot1 <- ggplot() +
geom_line(aes(x = x_values, y = y_values_f1), color = "blue") +
labs(y = "Density", x = "x", title = "Normal Distributions Function 1") +
theme_minimal()
# plot the second graph
plot2 <- ggplot() +
geom_line(aes(x = x_values, y = y_values_f2), color = "red") +
labs(y = "Density", x = "x", title = "Normal Distributions Function 2") +
theme_minimal()
# showing our plots
plot1
plot2
library(ggplot2)
# define the values that we know from his description ðŸ™‚
mu <- 0.0
sigma <- 10.0
tau <- 1.0
# defining your functions (this is a bit annoying if you do it manually)
f1 <- function(x) {
(1 / (sigma * sqrt(2 * pi))) * exp(-1 * ((x - mu)^2) / (2 * sigma^2))
}
f2 <- function(x) {
(sqrt(tau/(2 * pi))) * exp(-(tau * ((x - mu)^2)) / 2))
library(ggplot2)
# define the values that we know from his description ðŸ™‚
mu <- 0.0
sigma <- 10.0
tau <- 1.0
# defining your functions (this is a bit annoying if you do it manually)
f1 <- function(x) {
(1 / (sigma * sqrt(2 * pi))) * exp(-1 * ((x - mu)^2) / (2 * sigma^2))
}
f2 <- function(x) {
(sqrt(tau/(2 * pi))) * exp((-tau * ((x - mu)^2)) / 2)
}
# calculate the x values
x_values <- seq(-5, 5, by = 0.01)
# calculate the y values by calling our function
y_values_f1 <- f1(x_values)
y_values_f2 <- f2(x_values)
# plot the first graph
plot1 <- ggplot() +
geom_line(aes(x = x_values, y = y_values_f1), color = "blue") +
labs(y = "Density", x = "x", title = "Normal Distributions Function 1") +
theme_minimal()
# plot the second graph
plot2 <- ggplot() +
geom_line(aes(x = x_values, y = y_values_f2), color = "red") +
labs(y = "Density", x = "x", title = "Normal Distributions Function 2") +
theme_minimal()
# showing our plots
plot1
plot2
library(ggplot2)
# define the values that we know from his description ðŸ™‚
mu <- 0.0
sigma <- 10.0
tau <- 1.0
# defining your functions (this is a bit annoying if you do it manually)
f1 <- function(x) {
(1 / (sigma * sqrt(2 * pi))) * exp(-1/2 * (((x - mu)/2)^2)
}
library(ggplot2)
# define the values that we know from his description ðŸ™‚
mu <- 0.0
sigma <- 10.0
tau <- 1.0
# defining your functions (this is a bit annoying if you do it manually)
f1 <- function(x) {
(1 / (sigma * sqrt(2 * pi))) * exp(-1/2 * (((x - mu)/2)^2))
}
f2 <- function(x) {
(sqrt(tau/(2 * pi))) * exp((-tau * ((x - mu)^2)) / 2) #Not sure about this
}
# calculate the x values
x_values <- seq(-5, 5, by = 0.01)
# calculate the y values by calling our function
y_values_f1 <- f1(x_values)
y_values_f2 <- f2(x_values)
# plot the first graph
plot1 <- ggplot() +
geom_line(aes(x = x_values, y = y_values_f1), color = "blue") +
labs(y = "Density", x = "x", title = "Normal Distributions Function 1") +
theme_minimal()
# plot the second graph
plot2 <- ggplot() +
geom_line(aes(x = x_values, y = y_values_f2), color = "red") +
labs(y = "Density", x = "x", title = "Normal Distributions Function 2") +
theme_minimal()
# showing our plots
plot1
plot2
library(ggplot2)
# define the values that we know from his description ðŸ™‚
mu <- 0.0
sigma <- 1.0
tau <- 1.0
# defining your functions (this is a bit annoying if you do it manually)
f1 <- function(x) {
(1 / (sigma * sqrt(2 * pi))) * exp(-1/2 * (((x - mu)/2)^2))
}
f2 <- function(x) {
(sqrt(tau/(2 * pi))) * exp((-tau * ((x - mu)^2)) / 2) #Not sure about this
}
# calculate the x values
x_values <- seq(-5, 5, by = 0.01)
# calculate the y values by calling our function
y_values_f1 <- f1(x_values)
y_values_f2 <- f2(x_values)
# plot the first graph
plot1 <- ggplot() +
geom_line(aes(x = x_values, y = y_values_f1), color = "blue") +
labs(y = "Density", x = "x", title = "Normal Distributions Function 1") +
theme_minimal()
# plot the second graph
plot2 <- ggplot() +
geom_line(aes(x = x_values, y = y_values_f2), color = "red") +
labs(y = "Density", x = "x", title = "Normal Distributions Function 2") +
theme_minimal()
# showing our plots
plot1
plot2
library(ggplot2)
# define the values that we know from his description ðŸ™‚
mu <- 0.0
sigma <- 1.0
tau <- 1.0
# defining your functions (this is a bit annoying if you do it manually)
f1 <- function(x) {
(1 / (sigma * sqrt(2 * pi))) * exp((-1/2) * (((x - mu)/2)^2))
}
f2 <- function(x) {
(sqrt(tau/(2 * pi))) * exp((-tau * ((x - mu)^2)) / 2) #Not sure about this
}
# calculate the x values
x_values <- seq(-5, 5, by = 0.01)
# calculate the y values by calling our function
y_values_f1 <- f1(x_values)
y_values_f2 <- f2(x_values)
# plot the first graph
plot1 <- ggplot() +
geom_line(aes(x = x_values, y = y_values_f1), color = "blue") +
labs(y = "Density", x = "x", title = "Normal Distributions Function 1") +
theme_minimal()
# plot the second graph
plot2 <- ggplot() +
geom_line(aes(x = x_values, y = y_values_f2), color = "red") +
labs(y = "Density", x = "x", title = "Normal Distributions Function 2") +
theme_minimal()
# showing our plots
plot1
plot2
