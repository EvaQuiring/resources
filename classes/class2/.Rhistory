knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "/C:/Users/evax3/OneDrive - Aarhus universitet/AU/Methods 2/resources/classes")
# Function to simulate basketball player
# Help from ChatGPT
basketball <- function(){
misses <- 0
total_shots <- 0
while (misses < 0) {
made_shot <- rbinom(1, size = 1, prob = 0.6)
if (made_shot ==1){
misses <- 0
} else {
misses <- misses + 1
}
total_shots <- total_shots + 1
}
return(total_shots)
}
# Example usage of the function, when done
# basket_sim <- basketball(printing = TRUE)
# Function to simulate basketball player
# Help from ChatGPT
basketball <- function(){
misses <- 0
total_shots <- 0
while (misses < 0) {
made_shot <- rbinom(1, size = 1, prob = 0.6)
if (made_shot ==1){
misses <- 0
} else {
misses <- misses + 1
}
total_shots <- total_shots + 1
}
return(total_shots)
}
# Example usage of the function, when done
basket_sim <- basketball(printing = TRUE)
# Function to simulate basketball player
# Help from ChatGPT
basketball <- function(){
misses <- 0
total_shots <- 0
while (misses < 0) {
made_shot <- rbinom(1, size = 1, prob = 0.6)
if (made_shot ==1){
misses <- 0
} else {
misses <- misses + 1
}
total_shots <- total_shots + 1
}
if(printing) {
print(paste("Total shots taken:", total_shots))
}
return(total_shots)
}
# Example usage of the function, when done
basket_sim <- basketball(printing = TRUE)
# Function to simulate basketball player
# Help from ChatGPT
basketball <- function(printing = FALSE){
misses <- 0
total_shots <- 0
while (misses < 0) {
made_shot <- rbinom(1, size = 1, prob = 0.6)
if (made_shot ==1){
misses <- 0
} else {
misses <- misses + 1
}
total_shots <- total_shots + 1
}
if(printing) {
print(paste("Total shots taken:", total_shots))
}
return(total_shots)
}
# Example usage of the function, when done
basket_sim <- basketball(printing = TRUE)
basket_sim2 <- basketball()
# Function to simulate basketball player
# Help from ChatGPT
basketball <- function(printing = TRUE){
misses <- 0
total_shots <- 0
while (misses < 0) {
made_shot <- rbinom(1, size = 1, prob = 0.6)
if (made_shot ==1){
misses <- 0
} else {
misses <- misses + 1
}
total_shots <- total_shots + 1
}
if(printing) {
print(paste("Total shots taken:", total_shots))
}
return(total_shots)
}
# Example usage of the function, when done
basket_sim <- basketball(printing = TRUE)
basket_sim2 <- basketball()
# Function to simulate basketball player
# Help from ChatGPT
basketball <- function(printing = TRUE){ #Making sure it prints the results
misses <- 0 # Keeping track of the misses
total_shots <- 0 # keeping track of the total shots
while (misses < 2) { #While it's under 2
made_shot <- rbinom(1, size = 1, prob = 0.6) #Binomial distribution (1 = made the shot & 0 = failed)
if (made_shot ==1){
misses <- 0 #If he makes it then reset the misses
} else {
misses <- misses + 1 # if he fails then add 1 to the misses
}
total_shots <- total_shots + 1 #Adding 1 to the total shots
}
if(printing) {
print(paste("Total shots taken:", total_shots)) #Printing the results with the text
}
return(total_shots) #Get the number
}
# Example usage of the function, when done
basket_sim <- basketball(printing = TRUE)
basket_sim2 <- basketball()
# Number of simulations - ChatGPT
num_sim <- 1000
#Making a list to get the numbers
results <- numeric(num_sim)
#Loop
for (number in 1:num_sim) {
results[number] <- basketball()
}
summary(results)
# Number of simulations - ChatGPT
num_sim <- 1000
#Making a list to get the numbers
results <- numeric(num_sim)
#Loop
for (number in 1:num_sim) {
results[number] <- basketball()
}
summary(results)
hist(results)
# Number of simulations - ChatGPT
num_sim <- 1000
#Making a list to get the numbers
results <- numeric(num_sim)
#Loop
for (number in 1:num_sim) {
results[number] <- basketball()
}
mean(results)
sd(results)
hist(results)
# Making a data frame to plot it
df_results <- data.frame(results = Results)
# Making a data frame to plot it
df_results <- data.frame(Results = results)
library(ggplot2)
scatter_plot <- ggplot(results, aes(x = ))
# Making a data frame to plot it
df_results <- data.frame(Sim_results = results)
library(ggplot2)
scatter_plot <- ggplot(results, aes(x = ))
# Making a data frame to plot it
?data.frame
# Making a data frame to plot it
df_results <- data.frame(Sim_results = results)
library(ggplot2)
scatter_plot <- ggplot(df_results, aes(x)) + geom_point()
# Making a data frame to plot it
df_results <- data.frame(Sim_results = results)
library(ggplot2)
scatter_plot <- ggplot(df_results, aes(x)) +
geom_point() +
theme_minimal()
scatter_plot
# Making a data frame to plot it
df_results <- data.frame(Sim_results = results)
library(ggplot2)
scatter_plot <- ggplot(df_results, aes(x = Sim_results)) +
geom_point() +
theme_minimal()
scatter_plot
# Making a data frame to plot it
df_results <- data.frame(Number <- num_sim, Sim_results = results)
library(ggplot2)
scatter_plot <- ggplot(df_results, aes(x = num_sim, y = Sim_results)) +
geom_point() +
theme_minimal()
scatter_plot
# Making a data frame to plot it
df_results <- data.frame(Number <- num_sim, Sim_results = results)
library(ggplot2)
scatter_plot <- ggplot(df_results, aes(y = num_sim, x = Sim_results)) +
geom_point() +
theme_minimal()
scatter_plot
# Calculating the proportion of success - ChatGPT
prop_suc <- 1 - results / sum(results)
# Making a data frame to plot it
df_results <- data.frame(succes_rate <- prop_suc, Sim_results = results)
library(ggplot2)
scatter_plot <- ggplot(df_results, aes(y = prop_suc, x = Sim_results)) +
geom_point() +
theme_minimal()
scatter_plot
# Calculating the proportion of success - ChatGPT
prop_suc <- 1 - results / sum(results)
# Making a data frame to plot it
df_results <- data.frame(succes_rate <- prop_suc, Sim_results = results)
library(ggplot2)
scatter_plot <- ggplot(df_results, aes(y = prop_suc, x = Sim_results)) +
geom_point() +
geom_smooth()
theme_minimal()
scatter_plot
# Calculating the proportion of success - ChatGPT
prop_suc <- 1 - results / sum(results)
# Making a data frame to plot it
df_results <- data.frame(succes_rate <- prop_suc, Sim_results = results)
library(ggplot2)
scatter_plot <- ggplot(df_results, aes(y = prop_suc, x = Sim_results)) +
geom_point() + #Scatter plot
geom_smooth() + #Adding trend line
labs(x = "Number of shots",
y = "Number of successfull shots",
title = "Scatterplot of shots taken") +
theme_minimal()
scatter_plot
?rbinom
# Writing out what I know
number_shots <- 10
prob_success <- 0.4
number_success <- 3
# One can use dbinom - chatGPT
dbinom(number_success, size = number_shots, prob = prob_success)
#Simulating
?rbinom
#Simulating
10_shots_basketball <- rbinom(number_success, size = number_shots, prob = prob_success)
#Simulating
10_shots_basketball <- rbinom(number_success, size = number_shots, prob = prob_success)
#Simulating
shots_basketball_10 <- rbinom(number_success, size = number_shots, prob = prob_success)
#Simulating
shots_basketball_10 <- rbinom(number_success, size = number_shots, prob = prob_success)
#Looping it (looked above)
for (numbers in 1:10000) {
shots_basketball_10[numbers]
}
#Simulating
number_sims <- 10000
shots_basketball_10 <- rep(NA, number_sims)
#Looping it (looked above)
for (numbers in 1:10000) {
shots_basketball_10[numbers] <- rbinom(number_success, size = number_shots, prob = prob_success)
}
# Variables
number_shots <- 10
prob_success <- 0.4
number_success <- 3
#Simulating
number_sims <- 10000
shots_basketball_10 <- rep(NA, number_sims)
#Looping it (looked above)
for (numbers in 1:10000) {
shots_basketball_10 <- rbinom(number_success, size = number_shots, prob = prob_success)
}
# Variables
number_shots <- 10
prob_success <- 0.4
number_success <- 3
#Simulating
number_sims <- 10000
shots_basketball_10 <- rep(NA, number_sims)
#Looping it (looked above)
for (numbers in 1:10000) {
shots_basketball_10 <- rbinom(number_success, size = number_shots, prob = prob_success)
}
summary(shots_basketball_10)
# Variables
number_shots <- 10
prob_success <- 0.4
number_success <- 3
#Simulating
number_sims <- 10000
shots_basketball_10 <- rep(NA, number_sims)
#Looping it (looked above)
for (numbers in 1:10000) {
shots_basketball_10 <- rbinom(number_success, size = number_shots, prob = prob_success)
}
summary(shots_basketball_10)
# Calculating the simulated probability
sim_prob <- sum(shots_basketball_10 == number_success) / number_sims
# Variables
number_shots <- 10
prob_success <- 0.4
number_success <- 3
#Simulating
number_sims <- 10000
shots_basketball_10 <- rep(NA, number_sims)
#Looping it (looked above)
for (numbers in 1:10000) {
shots_basketball_10 <- rbinom(number_success, size = number_shots, prob = prob_success)
}
# Calculating the simulated probability
sim_prob <- sum(shots_basketball_10 == number_success) / number_sims
sim_prob
# Variables
number_shots <- 10
prob_success <- 0.4
number_success <- 3
#Simulating
number_sims <- 10000
shots_basketball_10 <- rep(NA, number_sims)
#Looping it (looked above)
for (numbers in 1:10000) {
shots_basketball_10 <- rbinom(1, size = number_shots, prob = prob_success)
}
# Calculating the simulated probability
sim_prob <- sum(shots_basketball_10 == number_success) / number_sims
sim_prob
# Variables
number_shots <- 10
prob_success <- 0.4
number_success <- 3
#Simulating
number_sims <- 10000
shots_basketball_10 <- rep(NA, number_sims)
#Looping it (looked above)
for (numbers in 1:10000) {
shots_basketball_10[numbers] <- rbinom(1, size = number_shots, prob = prob_success)
}
# Calculating the simulated probability - ChatGPT
sim_prob <- sum(shots_basketball_10 == number_success) / number_sims
sim_prob #I think this is wrong - CHECK WITH THE SOLUTION
# Variables
number_shots <- 10
prob_success <- 0.4
number_success <- 3
#Simulating
number_sims <- 10000
shots_basketball_10 <- rep(NA, number_sims)
#Looping it (looked above)
for (numbers in 1:10000) {
shots_basketball_10[numbers] <- rbinom(number_success, size = number_shots, prob = prob_success)
}
# Calculating the simulated probability - ChatGPT
sim_prob <- sum(shots_basketball_10 == number_success) / number_sims
sim_prob # There is a small difference since it's 0.2121
# Variables
number_shots <- 10
prob_success <- 0.4
number_success <- 3
#Simulating
number_sims <- 10000
shots_basketball_10 <- rep(NA, number_sims)
#Looping it (looked above)
for (numbers in 1:10000) {
shots_basketball_10[numbers] <- rbinom(number_success, size = number_shots, prob = prob_success)
}
# Calculating the simulated probability - ChatGPT
sim_prob <- sum(shots_basketball_10 == number_success) / number_sims
sim_prob # There is a small difference since it's 0.2121
hist(shots_basketball_10)
# Variables
number_shots <- 10
prob_success <- 0.4
number_success <- 3
#Simulating
number_sims <- 10000
shots_basketball_10 <- rep(NA, number_sims)
#Looping it (looked above)
for (numbers in 1:10000) {
shots_basketball_10[numbers] <- rbinom(1, size = number_shots, prob = prob_success)
}
# Calculating the simulated probability - ChatGPT
sim_prob <- sum(shots_basketball_10 == number_success) / number_sims
sim_prob # There is a small difference since it's 0.2121
hist(shots_basketball_10)
# Variables
number_shots <- 10
prob_success <- 0.4
number_success <- 3
#Simulating
number_sims <- 10000
shots_basketball_10 <- rep(NA, number_sims)
#Looping it (looked above)
for (numbers in 1:10000) {
shots_basketball_10[numbers] <- rbinom(1, size = number_shots, prob = prob_success)
}
# Calculating the simulated probability - ChatGPT
sim_prob <- sum(shots_basketball_10 == number_success) / number_sims
sim_prob # There is a small difference since it's 0.2121
hist(shots_basketball_10)
# Variables
number_shots <- 10
prob_success <- 0.4
number_success <- 3
#Simulating
number_sims <- 10000
shots_basketball_10 <- rep(NA, number_sims)
#Looping it (looked above)
for (numbers in 1:10000) {
shots_basketball_10[numbers] <- dbinom(number_success, size = number_shots, prob = prob_success)
}
# Calculating the simulated probability - ChatGPT
sim_prob <- sum(shots_basketball_10 == number_success) / number_sims
sim_prob # There is a small difference since it's 0.2121 (it varies for everytime I run the code)
hist(shots_basketball_10)
# Variables
number_shots <- 10
prob_success <- 0.4
number_success <- 3
#Simulating
number_sims <- 10000
shots_basketball_10 <- rep(NA, number_sims)
#Looping it (looked above)
for (numbers in 1:10000) {
shots_basketball_10[numbers] <- rbinom(1, size = number_shots, prob = prob_success)
}
# Calculating the simulated probability - ChatGPT
sim_prob <- sum(shots_basketball_10 == number_success) / number_sims
sim_prob # There is a small difference since it's 0.2121 (it varies for everytime I run the code)
hist(shots_basketball_10)
