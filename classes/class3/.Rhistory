}
}
x_1 <- c(-4, 7, 23, -120309, 0)
function_statement(x_1)
if (x > 0) {
print("Positive")
} else if (x < 0) {
print("Negative")
} else {
print("Zero")
}
if (x > 0) {
print("Positive")
} else if (x < 0) {
print("Negative")
} else {
print("Zero")
}
x <- -4
x <- 7
x <- 23
x <- -120
x <- 0
if (x > 0) {
print("Positive")
} else if (x < 0) {
print("Negative")
} else {
print("Zero")
}
list_of_numbers_c1 <- c(-4, 7, 23, -120309, 0)
for (x in list_of_numbers_c1) {
if (x > 0) {
print("Positive")
} else if (x < 0) {
print("Negative")
} else {
print("Zero")
}
}
ages <- c(10, 20, 56, 19, 89, 26)
for (age in ages) {
if (age < 12) {
print("Child")
} else if (age >= 12 && age <= 18) {
print("Teenager")
} else {
print("Adult")
}
}
ages <- c(10, 20, 56, 19, 89, 26, 15)
for (age in ages) {
if (age < 12) {
print("Child")
} else if (age >= 12 && age <= 18) {
print("Teenager")
} else {
print("Adult")
}
}
mean_function <- function (vector_of_numbers) {
mean_vector <- mean(vector_of_numbers)
return(mean_vector)
}
listd1 <- c(12, 5, 2, 345)
mean_function(listd1)
calculate_are_circle <- function (radius)  {
area <- pi*radius^2
return(area)
}
calculate_area_circle <- function (radius)  {
area <- pi*radius^2
return(area)
}
calculate_area_circle(3)
?dnorm
?sample
n_sims <- 10000
dice_sums <- numeric(num_simulations) # Create an empty vector to store the information
n_sims <- 10000
dice_sums <- numeric(n_sims) # Create an empty vector to store the information
?sample
for (roll in 1:n_sims) {
die_1 <- sample(1:6, 1, replace = TRUE)
die_2 <- sample(1:6, 1, replace = TRUE)
dice_sums[roll] <- die_1 + die_2
}
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "C:/Users/evax3/OneDrive - Aarhus universitet/AU/Methods 2/resources")
library(pacman)
pacman::p_load(tidyverse,
ggpubr,
ggplot2)
# A for for loop that squares the numbers from 1:16
for (number in 1:16) {
print(paste("The current number is: ", number)) #To check where the error is - if there is one
squared_number <- number^2
print(paste("The squared number is: ", squared_number))
}
# With paste you print words and numbers
# While loop that prints numbers from 1 to 25
counter <- 1 #Track where we at
while (counter <= 25) {
print(paste("The counter is currently: ", counter)) #If we only do this it will run forever
counter <- counter + 1
}
# Is else chunk that checks if a number is positive, negative or zero
number <- 9
if (number > 0) {
print ("Positive number")
} else if (number < 0) {
print("Negative number")
} else {
print("Zero")
}
# If else statement in a for loop
list_of_numbers <- c(9, -5, 6, 35434553, 0)
for (number in list_of_numbers) {
if (number > 0) {
print ("Positive number")
} else if (number < 0) {
print("Negative number")
} else {
print("Zero")
}
} # Clean up with shift + ctrl + a
# If else statement in a function
number_checker <- function(list_of_numbers_) {
# Looping through the numbers in the list inputted
for (number in list_of_numbers_) {
if (number > 0) {
print ("Positive number")
} else if (number < 0) {
print("Negative number")
} else {
print("Zero")
}
}
}
# Using the function
number_list = c(8, 9, -3, 0)
number_checker(number_list)
# Creating a function to calculate the area of a rectangle
calculate_area <- function(width, length_) { # Don't override the functions - call it something else like the name with _
area <- width * length_
return(area)
}
calculate_area(3, 4)
first_number <- 1
number_sum <- 0
for (number in 1:100) {
number_sum <- number_sum + number
print(number_sum)
}
number_sum2 <- 0
for (number in 1:20) {
number_sum2 <- number_sum2 + number^2
sum_2 <- sum(number_sum2)
print(sum_2)
}
sum_tracker <- 0
while(counter <= 1000) {
sum_tracker <- sum_tracker + 1
counter <- sum((1:sum_tracker))
print(sum_tracker)
}
# Used ChatGPT
countdown <- 10
while (countdown > 0) {
print(countdown)
countdown <- countdown - 1
}
print("Lift off!")
list_of_numbers_c1 <- c(-4, 7, 23, -120309, 0)
for (x in list_of_numbers_c1) {
if (x > 0) {
print("Positive")
} else if (x < 0) {
print("Negative")
} else {
print("Zero")
}
}
ages <- c(10, 20, 56, 19, 89, 26, 15)
for (age in ages) {
if (age < 12) {
print("Child")
} else if (age >= 12 && age <= 18) {
print("Teenager")
} else {
print("Adult")
}
}
mean_function <- function (vector_of_numbers) {
mean_vector <- mean(vector_of_numbers)
return(mean_vector)
}
listd1 <- c(12, 5, 2, 345)
mean_function(listd1)
calculate_area_circle <- function (radius)  {
area <- pi*radius^2
return(area)
}
calculate_area_circle(3) # Test
hist(dice_sums)
n_sims <- 10000
dice_sums <- numeric(n_sims) # Create an empty vector to store the information
?sample
for (roll in 1:n_sims) {
die_1 <- sample(1:6, 1, replace = TRUE)
die_2 <- sample(1:6, 1, replace = TRUE)
dice_sums[roll] <- die_1 + die_2
}
hist(dice_sums)
print(mean(dice_sums))
print(sd(dice_sums))
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "C:/Users/evax3/OneDrive - Aarhus universitet/AU/Methods 2/resources")
library(pacman)
pacman::p_load(tidyverse,
ggpubr,
ggplot2)
# A for for loop that squares the numbers from 1:16
for (number in 1:16) {
print(paste("The current number is: ", number)) #To check where the error is - if there is one
squared_number <- number^2
print(paste("The squared number is: ", squared_number))
}
# With paste you print words and numbers
# While loop that prints numbers from 1 to 25
counter <- 1 #Track where we at
while (counter <= 25) {
print(paste("The counter is currently: ", counter)) #If we only do this it will run forever
counter <- counter + 1
}
# Is else chunk that checks if a number is positive, negative or zero
number <- 9
if (number > 0) {
print ("Positive number")
} else if (number < 0) {
print("Negative number")
} else {
print("Zero")
}
# If else statement in a for loop
list_of_numbers <- c(9, -5, 6, 35434553, 0)
for (number in list_of_numbers) {
if (number > 0) {
print ("Positive number")
} else if (number < 0) {
print("Negative number")
} else {
print("Zero")
}
} # Clean up with shift + ctrl + a
# If else statement in a function
number_checker <- function(list_of_numbers_) {
# Looping through the numbers in the list inputted
for (number in list_of_numbers_) {
if (number > 0) {
print ("Positive number")
} else if (number < 0) {
print("Negative number")
} else {
print("Zero")
}
}
}
# Using the function
number_list = c(8, 9, -3, 0)
number_checker(number_list)
# Creating a function to calculate the area of a rectangle
calculate_area <- function(width, length_) { # Don't override the functions - call it something else like the name with _
area <- width * length_
return(area)
}
calculate_area(3, 4)
first_number <- 1
number_sum <- 0
for (number in 1:100) {
number_sum <- number_sum + number
print(number_sum)
}
number_sum2 <- 0
for (number in 1:20) {
number_sum2 <- number_sum2 + number^2
sum_2 <- sum(number_sum2)
print(sum_2)
}
sum_tracker <- 0
while(counter <= 1000) {
sum_tracker <- sum_tracker + 1
counter <- sum((1:sum_tracker))
print(sum_tracker)
}
# Used ChatGPT
countdown <- 10
while (countdown > 0) {
print(countdown)
countdown <- countdown - 1
}
print("Lift off!")
list_of_numbers_c1 <- c(-4, 7, 23, -120309, 0)
for (x in list_of_numbers_c1) {
if (x > 0) {
print("Positive")
} else if (x < 0) {
print("Negative")
} else {
print("Zero")
}
}
ages <- c(10, 20, 56, 19, 89, 26, 15)
for (age in ages) {
if (age < 12) {
print("Child")
} else if (age >= 12 && age <= 18) {
print("Teenager")
} else {
print("Adult")
}
}
mean_function <- function (vector_of_numbers) {
mean_vector <- mean(vector_of_numbers)
return(mean_vector)
}
listd1 <- c(12, 5, 2, 345)
mean_function(listd1)
calculate_area_circle <- function (radius)  {
area <- pi*radius^2
return(area)
}
calculate_area_circle(3) # Test
n_sims <- 10000
dice_sums <- numeric(n_sims) # Create an empty vector to store the information
?sample
for (roll in 1:n_sims) {
die_1 <- sample(1:6, 1, replace = TRUE)
die_2 <- sample(1:6, 1, replace = TRUE)
dice_sums[roll] <- die_1 + die_2
}
hist(dice_sums)
print(mean(dice_sums))
print(sd(dice_sums))
P0 <- 100
growth_rate <- 0.02
time <- 50
population <- rep(NA, time)
for (people in 1:time) {
population[people] <- P0 * exp(growth_rate * people)
}
plot(population)
df_e2 <- data.frame(years = 1:time, population = population)
View(df_e2)
P0 <- 100
growth_rate <- 0.02
time <- 50
population <- rep(NA, time)
for (people in 0:time) {
population[people] <- P0 * exp(growth_rate * people)
}
df_e2 <- data.frame(years = 1:time, population = population)
plot_population <- ggplot()
P0 <- 100
growth_rate <- 0.02
time <- 50
population <- rep(NA, time)
for (people in 1:time) {
population[people] <- P0 * exp(growth_rate * people)
}
df_e2 <- data.frame(years = 1:time, population = population)
plot_population <- ggplot()
P0 <- 100
growth_rate <- 0.02
time <- 50
population <- rep(NA, time)
for (people in 1:time) {
population[people] <- P0 * exp(growth_rate * people)
}
df_e2 <- data.frame(years = 1:time, population = population)
plot_population <- ggplot(df_e2, aes(x = years, y = population))
P0 <- 100
growth_rate <- 0.02
time <- 50
population <- rep(NA, time)
for (people in 1:time) {
population[people] <- P0 * exp(growth_rate * people)
}
df_e2 <- data.frame(years = 1:time, population = population)
plot_population <- ggplot(df_e2, aes(x = years, y = population)) + geom_point()
plot_population
# What we know
return_ <- 0.07
sd_start <- 0.1
n_years <- 30
start_inv <- 10000
n_sims <- 1000
final_value <- rep(NA, n_sims) # Create empty vector
for (money in 1:n_sims) {
}
final_value <- numeric(n_sims) # Create empty vector
# What we know
return_ <- 0.07
sd_start <- 0.1
n_years <- 30
start_inv <- 10000
n_sims <- 1000
final_value <- numeric(n_sims) # Create empty vector
for (money in 1:n_sims) {
yearly_money <- rnorm(n_years, mean = return, sd = sd_start)
final_value[money] <- start_inv * prod(1 + yearly_money)
}
# What we know
return_ <- 0.07
sd_start <- 0.1
n_years <- 30
start_inv <- 10000
n_sims <- 1000
final_value <- numeric(n_sims) # Create empty vector
for (money in 1:n_sims) {
yearly_money <- rnorm(n_years, mean = return_, sd = sd_start)
final_value[money] <- start_inv * prod(1 + yearly_money)
}
hist(final_value)
# What we know
return_ <- 0.07
sd_start <- 0.1
n_years <- 30
start_inv <- 10000
n_sims <- 1000
final_value <- numeric(n_sims) # Create empty vector
for (money in 1:n_sims) {
yearly_money <- rnorm(n_years, mean = return_, sd = sd_start)
final_value[money] <- start_inv * prod(1 + yearly_money)
}
plot_final_value <- ggplot(final_value, aes(x = final_value)) + geom_histogram()
# What we know
return_ <- 0.07
sd_start <- 0.1
n_years <- 30
start_inv <- 10000
n_sims <- 1000
final_value <- numeric(n_sims) # Create empty vector
for (money in 1:n_sims) {
yearly_money <- rnorm(n_years, mean = return_, sd = sd_start)
final_value[money] <- start_inv * prod(1 + yearly_money)
}
df_e3 <- data.frame(final_value = final_value)
plot_final_value <- ggplot(df_e3, aes(x = final_value)) + geom_histogram()
plot_final_value
# What we know
return_ <- 0.07
sd_start <- 0.1
n_years <- 30
start_inv <- 10000
n_sims <- 1000
final_value <- numeric(n_sims) # Create empty vector
for (money in 1:n_sims) {
yearly_money <- rnorm(n_years, mean = return_, sd = sd_start)
final_value[money] <- start_inv * prod(1 + yearly_money)
}
df_e3 <- data.frame(final_value = final_value)
plot_final_value <- ggplot(df_e3, aes(x = final_value)) + geom_histogram()
plot_final_value
print(paste("The new mean is: ", mean(final_value)))
print(paste("The new sd is: ", sd(final_value)))
?barplot
?binorm
?binorm
?bnorm
?dnorm
n <- 20
p <- 0.3
bi_data <- dnorm(1:20, n, p)
barplot(bi_data)
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "/Users/pernillebrams/Desktop/AARHUS_UNIVERSITY/instructor_2024/methods-2")
# Simulate some data
bino_data <- dbinom(1:20, # I want 20 points
20,   # Setting n = 20 as instructed in the question
0.3)  # Setting p = 0.3 as instructed in the question
# Plotting
barplot(bino_data,
ylab="Probability",
ylim=c(0,0.2),
xlab = 'k',
names.arg=1:20)
# This distribution show the probability of getting exactly k successes in n independent Bernoulli trials
n <- 20
p <- 0.3
bi_data <- dnorm(1:20, n, p)
# Pernilles code
barplot(bi_data,
ylab="Probability",
ylim=c(0,0.2),
xlab = 'k',
names.arg=1:20)
n <- 20
p <- 0.3
bi_data <- dbinorm(1:20, n, p)
n <- 20
p <- 0.3
bi_data <- dbinom(1:20, n, p)
# Pernilles code
barplot(bi_data,
ylab="Probability",
ylim=c(0,0.2),
xlab = 'k',
names.arg=1:20)
