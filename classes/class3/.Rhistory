knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "C:/Users/evax3/OneDrive - Aarhus universitet/AU/Methods 2/resources")
library(pacman)
pacman::p_load(tidyverse,
ggpubr,
ggplot2)
# A for for loop that squares the numbers from 1:16
for (number in 1:16) {
squared_number <- number^2
print(squared_number)
}
# A for for loop that squares the numbers from 1:16
for (number in 1:16) {
print(paste("The current number is: ", number)) #To check where the error is - if there is one
squared_number <- number^2
print(paste("The squared number is: ", squared_number))
}
# While loop that prints numbers from 1 to 25
counter <- 1 #Track where we at
while (counter <= 25) {
print(paste("The counter is currently: ", counter)) #If we only do this it will run forever
counter <- counter + 1
}
# Is else chunk that checks if a number is positive, negative or zero
number <- 9
if (number > 0) {
print ("Positive number")
} else if (number < 0) {
print("Negative number")
} else {
print("Zero")
}
# If else statement in a for loop
list_of_numbers <- c(9, -5, 6, 35434553, 0)
for (number in list_of_numbers) {
if (number > 0) {
print ("Positive number")
} else if (number < 0) {
print("Negative number")
} else {
print("Zero")
}
} # Clean up with shift + ctrl + a
# If else statement in a function
number_checker <- function(list_of_numbers_) {
# Looping through the numbers in the list inputted
for (number in list_of_numbers_) {
if (number > 0) {
print ("Positive number")
} else if (number < 0) {
print("Negative number")
} else {
print("Zero")
}
}
}
number_checker(number_list)
number_list = c(8, 9, -3, 0)
number_checker(number_list)
calculate_area <- function(width, length_) { # Don't override the functions - call it something else like the name with _
area <- width * length_
return(area)
}
calculate_area(3, 4)
# What we know
cost_variance <- 600.0
cost_se <- 400.0
cost_df <- 50.0
effect_variance <- 3.0
effect_se <- 1.0
effect_df <- 100.0
n_sims_icer <- 1000
# Create lists with the simulations
cost_dif <- rnorm(n_sims_icer, mean = cost_variance, sd = cost_se)
effect_dif <- rnorm(n_sims_icer, mean = effect_variance, sd = effect_se)
ICER <- cost_dif/effect_dif
# Creating a data frame and add a column with the ratio/ICER
df_ce <- data.frame(cost = cost_dif, effectiveness = effect_dif, ICER = ICER)
# Scatter plot
plot_3a <- ggplot(df_ce, aes(x= cost, y = effectiveness)) + geom_point() + theme_minimal()
plot_3a
## ADD LABS
# Compute mean, median and standard error
ICER_mean <- mean(ICER)
ICER_median <- median(ICER)
ICER_sd <- sd(ICER)
# Print them
cat("The mean = ", ICER_mean, ", The median = ", ICER_median, ", and The sd = ", ICER_sd)
# Quantiles
ICER_50 <- quantile(ICER, c(0.25, 0.75))
ICER_95 <- quantile(ICER, c(0.025, 0.975))
cat(". The 50% interval is", ICER_50,"and the 95% interval is", ICER_95)
first_number <- 1
number_sum <- 0
for (number in 1:100) {
sum_step1 <- number_sum + number
sum_step2 <- sum_step1 + number
}
print(sum_step2)
first_number <- 1
number_sum <- 0
for (number in 1:100) {
number_sum <- number_sum + number
print(number_sum)
}
number_sum2 <- 1
for (number in 1:20) {
number_sum2 <- number^2
sum_2 <- sum(number_sum2)
print(sum_2)
}
number_sum2 <- 0
for (number in 1:20) {
number_sum2 <- number_sum2 + number^2
sum_2 <- sum(number_sum2)
print(sum_2)
}
1 +23+4+5+6+7
sum_tracker <- 1
while(counter > 1000) {
sum_tracker <- sum_tracker +1
print(sum_tracker)
}
sum_tracker <- 1
while(counter > 1000) {
counter <- sum_tracker + 1
print(sum_tracker)
}
(1:10)
sum_tracker <- 0
while(counter <= 1000) {
sum_tracker <- sum_tracker + 1
counter <- sum((1:sum_tracker))
print(sum_tracker)
}
start_number <- 10
while (start_number < 1) {
start_number <- start_number - 1
if(start_number == 1) {
print("Lift off!")
}
}
start_number <- 10
while (countdown < 1) {
countdown <- start_number - 1
if(start_number == 1) {
print("Lift off!")
}
}
start_number <- 10
while (countdown > 1) {
countdown <- start_number - 1
if(start_number == 1) {
print("Lift off!")
}
}
start_number <- 10
while (countdown > 1) {
start_number_2 <- start_number - 1
countdown <- start_number_2 - 1
if(start_number == 1) {
print("Lift off!")
}
}
countdown <- 10
while (countdown > 0) {
print(countdown)
countdown <- countdown - 1
}
print("Lift off!")
if (x > 0) {
print("Positive")
} else if (x < 0) {
print("Negative")
} else {
print("Zero")
}
x <- c(-4, 7, 23, -120309, 0)
if (x > 0) {
print("Positive")
} else if (x < 0) {
print("Negative")
} else {
print("Zero")
}
x <- c(-4, 7, 23, -120309, 0)
function_statement <- function(x){
if (x > 0) {
print("Positive")
} else if (x < 0) {
print("Negative")
} else {
print("Zero")
}
}
function_statement <- function(x){
if (x > 0) {
print("Positive")
} else if (x < 0) {
print("Negative")
} else {
print("Zero")
}
}
x_1 <- c(-4, 7, 23, -120309, 0)
function_statement(x_1)
if (x > 0) {
print("Positive")
} else if (x < 0) {
print("Negative")
} else {
print("Zero")
}
if (x > 0) {
print("Positive")
} else if (x < 0) {
print("Negative")
} else {
print("Zero")
}
x <- -4
x <- 7
x <- 23
x <- -120
x <- 0
if (x > 0) {
print("Positive")
} else if (x < 0) {
print("Negative")
} else {
print("Zero")
}
list_of_numbers_c1 <- c(-4, 7, 23, -120309, 0)
for (x in list_of_numbers_c1) {
if (x > 0) {
print("Positive")
} else if (x < 0) {
print("Negative")
} else {
print("Zero")
}
}
ages <- c(10, 20, 56, 19, 89, 26)
for (age in ages) {
if (age < 12) {
print("Child")
} else if (age >= 12 && age <= 18) {
print("Teenager")
} else {
print("Adult")
}
}
ages <- c(10, 20, 56, 19, 89, 26, 15)
for (age in ages) {
if (age < 12) {
print("Child")
} else if (age >= 12 && age <= 18) {
print("Teenager")
} else {
print("Adult")
}
}
mean_function <- function (vector_of_numbers) {
mean_vector <- mean(vector_of_numbers)
return(mean_vector)
}
listd1 <- c(12, 5, 2, 345)
mean_function(listd1)
calculate_are_circle <- function (radius)  {
area <- pi*radius^2
return(area)
}
calculate_area_circle <- function (radius)  {
area <- pi*radius^2
return(area)
}
calculate_area_circle(3)
?dnorm
?sample
n_sims <- 10000
dice_sums <- numeric(num_simulations) # Create an empty vector to store the information
n_sims <- 10000
dice_sums <- numeric(n_sims) # Create an empty vector to store the information
?sample
for (roll in 1:n_sims) {
die_1 <- sample(1:6, 1, replace = TRUE)
die_2 <- sample(1:6, 1, replace = TRUE)
dice_sums[roll] <- die_1 + die_2
}
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "C:/Users/evax3/OneDrive - Aarhus universitet/AU/Methods 2/resources")
library(pacman)
pacman::p_load(tidyverse,
ggpubr,
ggplot2)
# A for for loop that squares the numbers from 1:16
for (number in 1:16) {
print(paste("The current number is: ", number)) #To check where the error is - if there is one
squared_number <- number^2
print(paste("The squared number is: ", squared_number))
}
# With paste you print words and numbers
# While loop that prints numbers from 1 to 25
counter <- 1 #Track where we at
while (counter <= 25) {
print(paste("The counter is currently: ", counter)) #If we only do this it will run forever
counter <- counter + 1
}
# Is else chunk that checks if a number is positive, negative or zero
number <- 9
if (number > 0) {
print ("Positive number")
} else if (number < 0) {
print("Negative number")
} else {
print("Zero")
}
# If else statement in a for loop
list_of_numbers <- c(9, -5, 6, 35434553, 0)
for (number in list_of_numbers) {
if (number > 0) {
print ("Positive number")
} else if (number < 0) {
print("Negative number")
} else {
print("Zero")
}
} # Clean up with shift + ctrl + a
# If else statement in a function
number_checker <- function(list_of_numbers_) {
# Looping through the numbers in the list inputted
for (number in list_of_numbers_) {
if (number > 0) {
print ("Positive number")
} else if (number < 0) {
print("Negative number")
} else {
print("Zero")
}
}
}
# Using the function
number_list = c(8, 9, -3, 0)
number_checker(number_list)
# Creating a function to calculate the area of a rectangle
calculate_area <- function(width, length_) { # Don't override the functions - call it something else like the name with _
area <- width * length_
return(area)
}
calculate_area(3, 4)
first_number <- 1
number_sum <- 0
for (number in 1:100) {
number_sum <- number_sum + number
print(number_sum)
}
number_sum2 <- 0
for (number in 1:20) {
number_sum2 <- number_sum2 + number^2
sum_2 <- sum(number_sum2)
print(sum_2)
}
sum_tracker <- 0
while(counter <= 1000) {
sum_tracker <- sum_tracker + 1
counter <- sum((1:sum_tracker))
print(sum_tracker)
}
# Used ChatGPT
countdown <- 10
while (countdown > 0) {
print(countdown)
countdown <- countdown - 1
}
print("Lift off!")
list_of_numbers_c1 <- c(-4, 7, 23, -120309, 0)
for (x in list_of_numbers_c1) {
if (x > 0) {
print("Positive")
} else if (x < 0) {
print("Negative")
} else {
print("Zero")
}
}
ages <- c(10, 20, 56, 19, 89, 26, 15)
for (age in ages) {
if (age < 12) {
print("Child")
} else if (age >= 12 && age <= 18) {
print("Teenager")
} else {
print("Adult")
}
}
mean_function <- function (vector_of_numbers) {
mean_vector <- mean(vector_of_numbers)
return(mean_vector)
}
listd1 <- c(12, 5, 2, 345)
mean_function(listd1)
calculate_area_circle <- function (radius)  {
area <- pi*radius^2
return(area)
}
calculate_area_circle(3) # Test
hist(dice_sums)
n_sims <- 10000
dice_sums <- numeric(n_sims) # Create an empty vector to store the information
?sample
for (roll in 1:n_sims) {
die_1 <- sample(1:6, 1, replace = TRUE)
die_2 <- sample(1:6, 1, replace = TRUE)
dice_sums[roll] <- die_1 + die_2
}
hist(dice_sums)
print(mean(dice_sums))
print(sd(dice_sums))
